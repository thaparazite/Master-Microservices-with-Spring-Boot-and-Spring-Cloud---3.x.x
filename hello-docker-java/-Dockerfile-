# This Dockerfile was renamed to add dependencies in pom.xml to create an image via maven

# set the image base
#FROM eclipse-temurin:21-jdk
# copy new files or directories to the image
#COPY target/*.jar app.jar
# informs Docker that the container listens on the specified network port at runtime
#EXPOSE 5000
# set the default command to run when starting the container
#ENTRYPOINT ["java","-jar","/app.jar"]

#---------------------------------------------------------
#FROM maven:3.9.9-eclipse-temurin-21 AS build
# Set the working directory
#WORKDIR /home/app
#COPY . /home/app
#RUN mvn -f /home/app/pom.xml clean package

# Use a smaller base image for the final image
#FROM eclipse-temurin:21-jdk
# Set the port the application will run on
#EXPOSE 5000
# Copy the jar file from the build stage
#COPY --from=build /home/app/target/*.jar app.jar
# Set the entry point for the container
#ENTRYPOINT ["sh","-c","java -jar /app.jar"]

#---------------------------------------------------------

# Build stage
FROM maven:3.9.9-eclipse-temurin-21 AS build
WORKDIR /home/app

# 1️⃣ Copy only the pom.xml and download dependencies (caching layer)
COPY ./pom.xml /home/app/pom.xml
RUN mvn -f /home/app/pom.xml dependency:go-offline

# 2️⃣ Copy the entire source code (avoids conflicts)
COPY ./src /home/app/src

# 3️⃣ Build the application
RUN mvn -f /home/app/pom.xml clean package

# Runtime stage (smaller image)
FROM eclipse-temurin:21-jre
WORKDIR /home/app

# Expose the application port
EXPOSE 5000

# Copy the built JAR from the build stage
COPY --from=build /home/app/target/*.jar /app.jar

# Run the application
ENTRYPOINT ["sh", "-c", "java -jar /app.jar"]


